Note:
------
If class does not have any constructor compiler will provide default constructor

if class contains default constructor only then compiler will not provide 
any parameterized constructor

if class contains parameterized constructor only then compiler will not provide 
any default constructor.


this keyword:
==============
this is a keyword refers to current class object.

by using this keyword we can call  instance variables and instance methods in another instance method.

by using this()/this(if parameter any )  we can constructor in another constructor

Note
=====
this keyword/ this()  won't be accessed  in static methods.


Assignment:
===========  
Copy Constructor with example.

Call by value and  call by object(passing an object) with example.


Encapsulation:
==============
The process of binding or wrapping  of
data members and member methods as single unit is called Encapsulation.


ex:
---
class


class A{

   //variables  //data members
   // methods  // member methods
 
}

Java bean/ POJO(plain old java object) class is called encapsulated class

what java bean?

A class which contain private access modifier instance variables followed by Getters and Setters.


Inheritance:
============
The process of acquiring the properties and behaviour from  the parent/super class
to child class/sub class.

Inheritance is also called as is-a relation ship.

the main advantage of inheritance is code reusability.

in java every class implicitly extends Object.

Object is the super class for all the classes.

Types:
------
single
multiple
multilevel
hybrid
hierarchal

Assignment:
===========
call by value and call by object(passing an object)
Has-a relation 
Aggregation --- loosely coupled
Composition --- tightly coupled

// var-args(...) -- [] 


public void addition(int x,int y){

}

--> methodSignature

addition(int,int)



public String sayHello(String msg){
  return "";

}

---> sayHello(String);



MethodOverLoading:
==================
In a class having same method name but differs in:

1) No of parameters
2) Differs in data type
3) Order of the type



@Override
default->protected->public
          

Parent:

void show(String msg){


}


Child extends Parent



@Override

protected void show(String msg){


}


// A super class reference variable holding its child class Object
Ex:
-----
Parent referenceVariable = Child();

Execution Flow is :
-------------------
first it will check the method signature in parent class its available then its search the same method
in its holding child class Object, it's available then it will call from child class, if not available
then it will call from the parent.

Super Keyword:
==============
Super keyword refers to Super/Parent class Object.

By using super keyword we can call super/Parent class instance variables and instance methods in Child/Sub class instance method.

Ex:
---
super.VariableName
super.methodName(if any arguments)


By using super Keyword we can call Super/Parent Class Constructors in Child/Sub Class Constructor.

ex:
----
public Child(){
  //super(); //calling super class Constructor
   super(if passing any paramters values) //calling a super class parameter constructor in Child Class Constructor
  
}

Interface:
==========
An interface in the Java programming language is an abstract type that is used to declare a object behavior that classes must implement.

All methods of an Interface do not contain implementation (method bodies).

Interfaces cannot be instantiated, but rather are implemented. 

A class that implements an interface must implement all of the abstracts methods described in the interface.
 
If class partially implemented interface then declare the class as abstract. But for abstract class cannot be instantiated. Then create a new class which extends from abstract class and provide the implementation for 
the unimplemented method which was not implemented in abstract class. Then create the object for newly created
class and access all the implemented methods.

Interfaces can’t have constructors because we can’t instantiate them and interfaces can’t have a method with body.

By default any attribute of interface is public, static and final, so we don’t need to provide access modifiers to the attributes but if we do, compiler doesn’t complain about it either.

By default interface methods are implicitly abstract and public, it makes total sense because the method don’t have body and so that subclasses can provide the method implementation.

An interface can’t extend any class but it can extend another interface.

Note:
-----
A interface can extends another interface

A class can implements more than one interface.

A class can extends another class as well as implement an interface.



Assignment:
-----------
1.What is the difference between normal class and abstract class?
 a) can abstract class contain abstract  method?
 b) can abstract class contain normal methods/static methods?

2.What is JDK and JVM?

3.JVM ARCHITECTURE?(class loader ,verifier ,Interpreter and Jit Compiler...memory components)

4.Java Features(Robust, platform independent....)

5.Difference between this and super keyword?

6.Search for interface and abstract classes ,try to complete atleast three examples from java guides and 
tutorialpoint.com  ****

7.Try to practice the question on Hackerrank.com. ***

8.Lab Assigment.docx  Lab1(4)....Lab2.

9. Aggregation and Composition search for it.

10. Recall the topics till what we covered, Monday able to give presentation .







































