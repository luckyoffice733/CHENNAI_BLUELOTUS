Note:
------
If class does not have any constructor compiler will provide default constructor

if class contains default constructor only then compiler will not provide 
any parameterized constructor

if class contains parameterized constructor only then compiler will not provide 
any default constructor.


this keyword:
==============
this is a keyword refers to current class object.

by using this keyword we can call  instance variables and instance methods in another instance method.

by using this()/this(if parameter any )  we can constructor in another constructor

Note
=====
this keyword/ this()  won't be accessed  in static methods.


Assignment:
===========  
Copy Constructor with example.

Call by value and  call by object(passing an object) with example.


Encapsulation:
==============
The process of binding or wrapping  of
data members and member methods as single unit is called Encapsulation.


ex:
---
class


class A{

   //variables  //data members
   // methods  // member methods
 
}

Java bean/ POJO(plain old java object) class is called encapsulated class

what java bean?

A class which contain private access modifier instance variables followed by Getters and Setters.


Inheritance:
============
The process of acquiring the properties and behaviour from  the parent/super class
to child class/sub class.

Inheritance is also called as is-a relation ship.

the main advantage of inheritance is code reusability.

in java every class implicitly extends Object.

Object is the super class for all the classes.

Types:
------
single
multiple
multilevel
hybrid
hierarchal

Assignment:
===========
call by value and call by object(passing an object)
Has-a relation 
Aggregation --- loosely coupled
Composition --- tightly coupled

// var-args(...) -- [] 


public void addition(int x,int y){

}

--> methodSignature

addition(int,int)



public String sayHello(String msg){
  return "";

}

---> sayHello(String);



MethodOverLoading:
==================
In a class having same method name but differs in:

1) No of parameters
2) Differs in data type
3) Order of the type



@Override
default->protected->public
          

Parent:

void show(String msg){


}


Child extends Parent



@Override

protected void show(String msg){


}


// A super class reference variable holding its child class Object
Ex:
-----
Parent referenceVariable = Child();

Execution Flow is :
-------------------
first it will check the method signature in parent class its available then its search the same method
in its holding child class Object, it's available then it will call from child class, if not available
then it will call from the parent.

Super Keyword:
==============
Super keyword refers to Super/Parent class Object.

By using super keyword we can call super/Parent class instance variables and instance methods in Child/Sub class instance method.

Ex:
---
super.VariableName
super.methodName(if any arguments)


By using super Keyword we can call Super/Parent Class Constructors in Child/Sub Class Constructor.

ex:
----
public Child(){
  //super(); //calling super class Constructor
   super(if passing any paramters values) //calling a super class parameter constructor in Child Class Constructor
  
}

Interface:
==========
An interface in the Java programming language is an abstract type that is used to declare a object behavior that classes must implement.

All methods of an Interface do not contain implementation (method bodies).

Interfaces cannot be instantiated, but rather are implemented. 

A class that implements an interface must implement all of the abstracts methods described in the interface.
 
If class partially implemented interface then declare the class as abstract. But for abstract class cannot be instantiated. Then create a new class which extends from abstract class and provide the implementation for 
the unimplemented method which was not implemented in abstract class. Then create the object for newly created
class and access all the implemented methods.

Interfaces can’t have constructors because we can’t instantiate them and interfaces can’t have a method with body.

By default any attribute of interface is public, static and final, so we don’t need to provide access modifiers to the attributes but if we do, compiler doesn’t complain about it either.

By default interface methods are implicitly abstract and public, it makes total sense because the method don’t have body and so that subclasses can provide the method implementation.

An interface can’t extend any class but it can extend another interface.

Note:
-----
A interface can extends another interface

A class can implements more than one interface.

A class can extends another class as well as implement an interface.



Assignment:
-----------
1.What is the difference between normal class and abstract class?
 a) can abstract class contain abstract  method?
 b) can abstract class contain normal methods/static methods?

2.What is JDK and JVM?

3.JVM ARCHITECTURE?(class loader ,verifier ,Interpreter and Jit Compiler...memory components)

4.Java Features(Robust, platform independent....)
5.Difference between this and super keyword?

6.Search for interface and abstract classes ,try to complete atleast three examples from java guides and 
tutorialpoint.com  ****

7.Try to practice the question on Hackerrank.com. ***

8.Lab Assigment.docx  Lab1(4)....Lab2.

9. Aggregation and Composition search for it.

10. Recall the topics till what we covered, Monday able to give presentation .


final:
======
We can declare a variable as final, final variable must be initialized it.
once variable declared as final ,if we try to reassignment the final variable ,you will get the error.

we can declare or create a methods as final but final methods cannot be override in the child class/sub class.

we can declare the class as final and we can create the object for the final class. But final classes
cannot be inherited(will not participate in inheritance concept). Ex: String is a final class.



Arrays:
========



what is exception?
what is try-catch-finally?
what is checked exception? list some exception classes?
what is unchecked exception? list some exception classes?
what is the super exception for all the exception?

Difference between throws and throw?
UserDefined Exception?



String:
-------
String is a class available in java.lang package.

String is a final class(we cannot inherited)

Immutable:
----------
In java, string objects are immutable. Immutable simply means unmodifiable or unchangeable. 

Once string object is created its data or state can't be changed but a new string 
object is created. 

In java whenever an immutable string is attempted to be modified then that string will not be 
modified, instead another string is created in non-constant pool(heap segment) with new reference. 

CONSTANT POOL:
============= 
Strings that are created without using new keyword are allocated memory on 
this pool. Duplicates are not allowed. 
 
Non-CONSTANT POOL or Heap Segment:
==================================
Strings that are created using new keyword are allocated memory on this pool. 
Duplicates are allowed. 

Note:
=====
“==” operator to compare two strings. We know “==” operator compares two strings based on the references. 

“equals ()” to compare two strings. We know equals() compares two strings based on the values(content).


Why string objects are immutable in java? 
==========================================
Because java uses the concept of string literal. 

Suppose there are 5 reference variables, all refer to one object "java". 
If one reference variable changes the value of the object, it will 
be affected to all the reference variables. 

That is why string objects are immutable in java.

compareTo():
============
The String compareTo() method compares values lexicographically and 
returns an integer value that describes if first string is less than, equal to or 
greater than second string. 

Suppose s1 and s2 are two string variables. 
If: 
s1 == s2 :0 
s1 > s2   :positive value 
s1 < s2   :negative value 



Case1: 
S1 = "SACHIN"
S2 = "SAURAV"

Comparison happens as shown below 
S A C H I N 
S A U R A V 

Each character is compared in lexical order. In the above example S,A are same 
in both string but when C and U are compared we know that C comes before U 
therefore s1 is considered lesser than s2. Which will give negative number 
when printed on screen. 



Case2: 
S1= "SAURAV" 
S2= "SACHIN" 

Comparison happens as shown below 
S A U R A V 
S A C H I N 

In the above example S,A are same in both string but when U and C are 
compared we know that U comes after C therefore s1 is considered greater 
than s2. Which will give positive number when printed on screen.


Case3: 
S1 = "SACHIN" 
S2 ="SACHIN"
Comparison happens as shown below

S A C H I N 
S A C H I N 
Above we see that all the characters are same in both the strings. Therefore 
when compared character by character there is no character greater or 
smaller than the other which means it will give the result as 0 when printed on 
the screen. 

Case4: 
S1= "JAVA"
S2= "JAVAC"
 
Let’s now see what happens when the size of the string is different. 
J A V A  
J A V A C  

We can see that both the strings contain “JAVA” but the second string has 
extra character C. Therefore second string is considered to be greater than 
the first. And when printed on screen we will get negative number.


s1=Java
s2=JavA





string s1="10";
int = Integer.parseInt(s1);



int b=20;
String a = String.valueOf(b);

Regular Expression:
===================
[abc] - \\w :it represent  either a or b or c
[a-zA-Z] -  :it represent either a to z or A to Z 
[0-9]  -\\d : it represent any number from 0 to 9
^[0-9]- except digits it will represent any lower or uppercase character

Quantifiers:
============
+ -- atleast one time  or any number of times
*  --- zero or any number of times
? -- zero or exactly one time
{n} -- number of occurances
{min,max} -- occurance of pattern min and max no of times.

[.]  -- any time of character
\\s  -- it will present the space

write a regular expression for a mobile number?
sol:

[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]

or
[0-9]{10}

or 

\\d{10}




StringBuffer:
-------------

StringBuffer is final class available in java.lang

StringBuffer is a mutable( changeable or modified the state)

StringBuffer mostly the methods are synchronized(Thread-Safe).


Note:
----
In StringBuffer  "==" operator and equals() method will compare the references.

Wrapper Classes:
================
Java is an impure object-oriented programming language because it supports 
primitive data type. 
 
To understand this, you must know an important fact about primitive data types 
which is Primitive data types are not treated as objects in java.    

object However, 100% pure object-oriented programs can be written in java using 
Wrapper Class. 

Now you understood why wrapper class let us understand what is Wrapper class. 

What is Wrapper class? 

The wrapper class in Java is a class provides the mechanism to convert 
primitive data types into object and object into primitive data type.

Ex:
----
int x=5;//primitiver

Integer ob= new Integer(x); //Wrapper class Object Integer

PM  --  Wrapper classes
------------------------
int --->Integer
float --> Float
double -->Double
long --->Long
char  ---> Character
boolean --> Boolean



Array Approach: 
================
type of data in series one after the other, which made it easy to store the 
values as well as access. But this approach came with its own limitations which 
were, 
1.Only homogeneous can be stored. 
2.Require contiguous memory allocations in RAM. 
3.Cannot grow or shrink in size.  
4.Do not have built-in methods for data manipulation. 

Why Collections??? 

To overcome the limitations that we came across with variable, array type approach we are now 
going to see what Collections consists of… 

The Collection in Java is a framework that provides an architecture to store 
and manipulate the group of objects. 

Java Collections can achieve all the operations that you perform on a data such 
as searching, sorting, insertion, manipulation, and deletion.

Java Collection means a single unit of objects. 
Java Collection framework provides many interfaces (Set, List, Queue, Deque) and classes (ArrayList, 
Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, TreeSet).




Generics in java :
------------------
<E>
<T>


public class Test<T>{

   T obj;

   public void setObj(T obj){
      this.obj= obj;
   }

   public T getObject(){
    return this.obj;
   }


}

Note:
-----
In Generics we should pass the T,E of Wrapper classes



custom sorting logic:
=====================
Product p1 
Product p2

Ascending order:
==================
p1.fieldName=p2.fieldName  then return 0;

p1.fieldName>p2.fieldName  then return 1;

p1.fieldName<p2.fieldName  then return -1;  

descending order:
==================
p1.fieldName=p2.fieldName  then return 0;

p1.fieldName>p2.fieldName  then return -1;

p1.fieldName<p2.fieldName  then return 1;



Stack:
-------
perform crud operations.


Why to override hashCode() and equals()?
what is the contract hashCode() and equals()?


//java8 Comparator Logic for custom sorting

Comparator<Employee> emcmpt=(o1, o2) ->o1.getEmpId()>o2.getEmpId()?1:o1.getEmpId()<o2.getEmpId()?-1:0;
		
//for String emName column sort with compareTo() method

Comparator<Employee> emcmpt=(o1, o2) ->o1.getEmpName.compareTo(o2.getEmpName);


Draw backs of array:
  --------------------
  Array size fixed once declared
  We can store only similar or homogenous types of elements

  Collections:
  ============
  A Collection is a group of individual objects represented as a single unit. 
  Java provides Collection Framework which defines several classes and 
  interfaces to represent a group of objects as a single unit.

  The Collection interface (java.util.Collection) and Map interface (java.util.Map) 
  are the two main “root” interfaces of Java collections.



   List Interface:
   ===============
   ArrayList:
   ----------

  1) ArrayList is class which provide implementations for
   List interface

  2)ArrayList internally uses re-sizeable (DS)array.

  3)duplicate elements are allowed.

  4)Insertion order is preserved.



  1)WAP to insert some Objects into ArrayList.

  2)Write a java to only String object into arraylist 
    using generics.

   Generics are used to specify a type of data to store into an Collection.
   Syntax:
  =======
   Classname <T> referencevariable = new ClassName<T>()

   note:
   ====
  1)Generic type should be a Wrapper class.
  
   byte   ----Byte   
   int       ---Integer
   float     --Float
   double   --Double
   long       --Long
  

  2) Generic Type can be a Referenced Classes also.
     ex: String or UserDefined Class(javabean class,model)

 Example:
 --------------   
  WAP to store Employee(javabean) class Object into ArrayList and
    display the  Employees details empId,empName,empSal  using generics

      
 Iterator
 ========

 hasNext() - boolean

 next() ---Object

 remove(Object o)--void;


 ListIterator:
 =============

  hasNext() - boolean
  next() ---Object

remove(Object o)--void;

hasPrevious() - boolean

previous() ---Object

remove(Object o)--void;


  LinkedList: 
  ============
   LinkedList is a class Which Implements List Interface

   LinkedList internally uses double-linked list data structure .

   Duplicated values are allowed
  
   Insertion Order is preserved

   null elements can be allowed

   heterogeneous and Homogeneous elements are allowed





  1) WAP to add elements into LinkedList Object

  2) WAP to store only  String Objects into LinkedList using Generics and
    display the elements
 
  3)WAP to store Course(courseId,courseName,fee) class Object into Linked List
  using generics and display the elements(courseid,courseName,fee) using ListIterator Forward direction and
  backward direction.

 ex:
 ===
 public class Course{
    private int cid;
    private String cname;
   //constructor
   //settters and getters methdod

 }

 note:
 --------
=>   In ArrayList by default the capacity is 10.

=>    once the capacity is reaches internally the Arraysize
        growable as (initialcapacity *3/2)+1

 
 Vector
 ============
 Vector class is legacy class (jdk 1.0)and is a thread safe class
 
 Vector  is a implementation class for List interface.

 Duplicates are allowed

 insertion order is preserved


Vector and Stack:
------------------
1)WAP to store heterogenous elements into Vector.
2)WAP to store homogeneous(specific type) elements into Vector using generics.
3)WAP to store JavaBean Object(Employee) into Vector using generics.

1)WAP to store heterogenous elements into Stack.
2)WAP to store homogeneous(specific type) elements into Stack using generics.
3)WAP to store JavaBean Object(Employee) into Stack using generics.


SET:
  ====
    1) It is a child interface of Collection
    2)Duplicates are not allowed
    3)Insertion order is  not preserved
    
    Set interface is used to represent unique objects
    as single entity.

    Classes:
    ======

    HashSet
    LinkedHashSet 
    interfaces-->Set-->SortedSet-->NaviagableSet-->TreeSet Class
    note(using TreeSet class we can store Homogeneous elements)



 Set(Interface):
 ====
 1) HashSet:
    ==========
    HashSet is class which provide implementation for Set Interface
    HashSet is class internally uses Data Structure is HashTable
   
    2)Duplicates are not allowed and null values are allowed
    3)Insertion order is  not preserved(it will display the elements in random order)

    Constructors:
    ===========

    HashSet hs = new HashSet();

    by default capacity is 16 elements

    HashSet hs = new HashSet(int capacity);

    HashSet  hs  = new HashSet(Collection c);

   
Example:
=======

 1)WAP to add the elements in HashSet 

 2) WAP to add product class object into HashSet using Generics
    and display the product elements using iterator

  public class Product{

      private int pid;
      private String pname;
      private float price;
    
    //constructors
    //setters and getters
  }


   2)LinkedHashSet:
    ===================  

     Duplicates are not allowed
   
     Insertion order is preserved --- important point

     null values are allowed

     Heterogeneous and Homogeneous elements are allowed

    LinkedHashSet internally uses Data Structure is hash table and double linked list.

    constructor:
    =============

     LinkedHashSet lhs = new LinkedHashSet();

     LinkedHashSet lhs = new LinkedHashSet(int capacity); 

     LinkedHashSet lhs = new LinkedHashSet(Collection c);

   

     1)WAP to add elements in to LInkedHashSet Object and display the
      elements using iterator

    2) WAP to add javabean class Item class(itemid,itemName,itemPrice)
       into linkedHashSet usign Generic and display the itemid,itemName and itemPrice 
        desceding order based on price.







    TreeSet:
    ========
    TreeSet is a implementation  class for ->SortedSet(I)->NavigableSet->(I)->Set(I)

    Duplicates are not allowed
 
    We can store only homogeneous elements .

    In Treeset internally it supports natural sorting order(using Comparable interface),
    so that elements displayed in ascending order

    TreeSet Internally uses DataStructure is  Red-black-Tree /Balanced Treed

    Constructors:
    =============

     TreeSet ts = new TreeSet();

     TreeSet ts = new TreeSet(Comparator);

     TreeSet ts = new TreeSet(Collection c);

    Example 
    =======
    1)WAP to add integers element into TreeSet
   
    2)WAP to add String elements into TreeSet 

    3)WAP to add Employee (javabean) class into TreeSet and 
      Display the element in ascending order based on empId
  



    note:
    =====
     TreeSet ts = new TreeSet();


    1)first it will check whether Object type(element) which 
      implements camparable interface or not.

    2) if it implements comparable interface  then elements
      will display in natural sorting order
  
      
  
   
   Ex:
   ====

    TreeSet s = new TreeSet();

    s.add("hello");
    s.add("welcome");

    s.add(new StringBuffer("java")); //castCastException
    s.add(10);//class Cast Exception


   in above example String implements Comparable interface
   then we wont get any ClassCastException

   But StringBuffer class will not implement
   comparable interface then we will get error ClassCastException

  note:
  =====
   String and all Wrapper classes by default implements 
   Comparable interface.
      
   what is comparable class?
   ==========================

    A class Which provide the implementation for Comparable 
    interface  then corresponding class is said to be comparable class.

    interface(comparable):
   =======================
 
    interface Comparable {

        int compareTo(Object obj);

   }  ---java.lang.Comparable


   
   Comparator
   ==========

   1)if we want to store heterogeneous elements
       and display the elements in custom sorting order
       then we should go for Comparator interface

   2)This interface available in java.util.Comparator
      this interface contains two methods
        
   public interface Comparator<T>{
        int compare(T obj1,T  obj2);
        ...
   }

      What is Comparator class?

      A class which provide implementation for Comparator interface
       for custom sorting and heterogeneous elements
        to store inside TreeSet Object then corressponding
        class is said to be Comparator class.
   
     3)we need to pass this Comparator Class Object
       to TreeSet parameterized Constructor to sort the elements in descending
       order and to store heteorgenious elements.

    4)to compare the Objects
 
    Ascending order
   --------------------------
     1) if Obj1 is lessthan Obj2 then it will return  -1
     2)if Obj1 is greater than Obj2 then  it will return 1
     3)if obj1 equals to Obj2 then it will return 0

  descending order
   --------------------------
     1) if Obj1 is lessthan Obj2 then it will return  1
     2)if Obj1 is greater than Obj2 then  it will return -1
     3)if obj1 equals to Obj2 then it will return 0



   sal compare:
    ===========

                if(eob1.getSal()>eob2.getSal()) {
			return 1;
		}else  {
			
			return -1;
		}



    
   Example:
   ========
   1)WAP to add Integer elements using generic into TreeSet and
     display the element in custom sorting order 
     (descending order using Comparator  interface).


  2)WAP to add dissimilar elements into TreeSet and
   display the element in custom sorting order 
    (descending order using Comparator  interface)

  3)WAP to add Item class  object into TreeSet  using Generics
   and display the elements from TreeSet using iterator

 class Item 


 {
     private int id ;
     private String name;
     //constructors 
    //setter and getters
}   


  Assignments:
  ===========
  1)Wap to insert integer elements into ArrayList using Generics
    a)Display the elements using iterator
    b)while read the elements from the list , try to remove integer object.
  
  2)What is meant by Comparable(interface) class?
       a)Which predefined classes implement this Comparable Interface

 

    Example:
    ========

    1) create a class named as Employee with
      two instance variables String name, int id

    2)create class to store employee object  inside 
      Tree Set

    
  MAP:
  ====
   Map is a interface

   Map is not a Child interface of Collection
   
   To represent group of key, value pairs as a single entity
   then we need to go for Map

   Duplicate Keys are not allowed ,values can be duplicated

   we can store heterogeneous and homogeneous type of data.
  
   we can store null key as once and null value no of times(HashMap and LinkedHashMap).    
     
  Implementation Classes 
  ======================

   HashMap
   LinkedHashMap
   TreeMap --(we can store only Homogeneous key type values)

  NOTE:
  ====
   Key,value --Paired  -key is an Object
                                 --value is an Object

   key,value --paired is called as EntrySet.


   
  1)HashMap :
   ==========
   Duplicate keys are not allowed and values can be duplicated

   Insertion order is not preserved (based on key)
   
   Internally uses  HashTable as DataStructure.

   Duplicate Keys are not allowed ,values can be duplicated

   Heterogeneous and Homogeneous keys and values are allowed
   
   methods:
   ========
   put(Object key,value Object value);
   get(Object o);
   Set  entrySet();
   containsKey();
   containsValue();
   remove(Object Key)  
   values() -->only values
   keySet() --> only key
   
   Constructors:
   =============

    HashMap hm = new HashMap();
    by default capacity is 16 elements

    Hashmap hm = new HashMap(Int initialCapacity);




    1 )WAP to store key,value pairs inside HashMap Object
 
   2) WAP to store  Key as Integers and Values are String 
     into HashMap using Generics and display the key,value pairs 
    using iterator 





   3) WAP to store Key as Integer and Value as a UserDefined ClassObject
      is Student(sid,sname,marks)  into HashMap and display the values(Student) 
    from HashMap using iterator.
       






   LinkedHashMap:
   ==============
   Duplicate keys are not allowed(unique) and values are duplicates

   Insertion order is preserved based  on key 

   underline DataStructure is double linked-list and hashtable.

   Homogeneous and hetergeneous key,value pairs are allowed


  1)WAP to Add Key,value pairs into LinkedHashMap






   TreeMap:
   =========
  
   TreeMap  underlying Datastrucure is RED-BLACK tree based alogrithm.

   In TreeMap the key should be Homogeneous type
    and values can be  heterogeneous.

   it display the elements in natural sorting order(ascending order)
     based on key.
      
   Duplicate key are not allowed
 
  null keys are not allowed and multiple null values are allowed

  TreeMap(c)->--NavigableMap(I)-->--SortedMap(I)-->Map(I)-->
    
   Constructors:
   ==============
   
    TreeMap tm = new TreeMap();
    TreeMap tm = new TreeMap(Comparator c);
    TreeMap tm = new TreeMap(Map m);
 
  
   1) WAP to add Integer key and String as values  into TreeMap


   Assignment
   2) WAP to add Integer as  a Key and Book(bid,bname,author) java bean
        class Object as Value into TreeMap  using Generics and display the
        Bookdetails using enhanced For loop.

      Interface Map{

    ----put(Object key,Object value);
-----------
     Interface Entry{
             
       Object getKey();
        Object getValue();
        setValue(Object o); 

         }
  }  
    note:
    =====

   to store heterogeneous keys and heterogeneous values
   inside TreeMap we need to go for Comparator interface.

   Example:
   ========

   1)WAP to store Heterogenous as key type and
      hetergeneous values inside TreeMap.
    note:
    -----
   by using Comparator Class
  
  
  self-study:
  ============
   1)Hashtable
   2)vector,Stack
   3)IdentityHashMap
   4)WeakHashMap
   5)Queue(PriorityQueue,BlockingQueue) 

  
  6)to sort List Object in  ascending
  ==================================

   Collections.sort(--ArrayListobject/LinkedListObject--);

   note:
   ======
   for sorting in ArrayList/LinkedList we need to store homogeneous.


  7)INArrayList/LinkedList Hetegeneous elements sorting:
  ====================================================

   Collections.sort(ArrayList/LinkedList,Comparator c);

   note:
   =====
   for custom sorting and hetergeneous we need to go for
    Comparator class.

      
  8)Object[] toArray() -- to convert list Object into Object Array.














